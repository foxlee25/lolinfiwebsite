{
  "name": "concurrent",
  "version": "0.3.2",
  "description": "Promises/A+ with Scala awesomeness",
  "main": "index.js",
  "scripts": {
    "test": "mocha test/*_spec.js --reporter spec"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/pspeter3/concurrent.git"
  },
  "keywords": [
    "promises",
    "aplus",
    "scala",
    "futures",
    "concurrent",
    "async"
  ],
  "author": {
    "name": "Phips Peter"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "de0a26f9add46f5687715e848f93d915680ae728",
  "devDependencies": {
    "promises-aplus-tests": "*",
    "mocha": "~1.12.0",
    "chai": "~1.7.2",
    "chai-spies": "~0.5.1",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.3",
    "grunt-gh-pages": "~0.7.1",
    "grunt-contrib-concat": "~0.3.0",
    "grunt-shell": "~0.3.1",
    "grunt-contrib-uglify": "~0.2.2"
  },
  "readme": "Concurrent\n==========\n\nPromises/A+ with Scala Awesomeness [![Build Status](https://travis-ci.org/pspeter3/concurrent.png)](https://travis-ci.org/pspeter3/concurrent)\n\nExamples\n--------\n\n```js\nvar Future = require('concurrent').Future;\nvar request = require('request');\n\nvar req = function(options) {\n  var future = new Future();\n  request(options, future.convert(['res', 'body']));\n  return future;\n};\n\n/**\n * Example #1: Simple Async Call\n */\n// Fetch Google with a SLA\nvar google = req('http://google.com').ready(1000);\n\n// Fetch the status\nvar status = google.map(function(value) {\n  return value.res.statusCode;\n});\n\n// Log the final result\nstatus.onSuccess(function(statusCode) {\n  console.log(statusCode);\n});\n\n/**\n * Examples #2: Parallel Calls\n */\nvar duckDuckGo = req('http://duckduckgo.com');\nvar bingOrYahoo = req('http://bing.com').fallbackTo(req('http://yahoo.com'));\n\nvar asArray = Future.sequence([google, duckDuckGo, bingOrYahoo]);\n\nasArray.onSuccess(function(values) {\n  console.log(values);\n});\n\nvar asObject = Future.sequence({\n  google: google,\n  duckDuckGo: duckDuckGo,\n  bingOrYahoo: bingOrYahoo\n});\n\nvar recoverable = asObject.recover({\n  promises: 'A+'\n});\n```\n\nBenchmarks\n----------\n\nHere are the top 5 libraries for some of the tests\n\n```text\n==========================================================\nTest: promise-fulfill x 10000\n----------------------------------------------------------\nlaissez:    |   3.00\nconcurrent: ▇▇  14.00\ndeferred:   ▇▇  19.00\nwhen:       ▇▇▇▇▇  36.00\nq:          ▇▇▇▇▇▇▇▇  57.00\n\n==========================================================\nTest: promise-reject x 10000\n----------------------------------------------------------\nconcurrent: |   6.00\navow:       ▇▇▇▇▇▇▇▇  55.00\nq:          ▇▇▇▇▇▇▇▇▇  60.00\nwhen:       ▇▇▇▇▇▇▇▇▇▇▇▇▇  89.00\nlaissez:    ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 118.00\n\n==========================================================\nTest: promise-sequence x 10000\n----------------------------------------------------------\nlaissez:    |   8.00\nwhen:       ▇▇▇▇▇▇▇▇ 204.00\nconcurrent: ▇▇▇▇▇▇▇▇ 207.00\navow:       ▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 335.00\ndeferred:   ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 421.00\n\n==========================================================\nTest: defer-fulfill x 10000\n----------------------------------------------------------\nlaissez:    ▇  21.00\nconcurrent: ▇▇▇▇  62.00\nwhen:       ▇▇▇▇▇▇▇ 103.00\navow:       ▇▇▇▇▇▇▇▇▇ 142.00\ndeferred:   ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 424.00\n\n==========================================================\nTest: defer-reject x 10000\n----------------------------------------------------------\navow:       ▇▇▇  50.00\nconcurrent: ▇▇▇▇▇  80.00\nwhen:       ▇▇▇▇▇▇▇▇▇▇ 160.00\nlaissez:    ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 240.00\nq:          ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 378.00\n\n==========================================================\nTest: defer-sequence x 10000\n----------------------------------------------------------\nlaissez:    |   7.00\nconcurrent: ▇▇▇▇▇▇▇▇▇▇▇ 176.00\nwhen:       ▇▇▇▇▇▇▇▇▇▇▇▇▇ 209.00\ndeferred:   ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 271.00\navow:       ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 352.00\n\n==========================================================\nTest: map x 10000\n----------------------------------------------------------\ndeferred:   ▇▇▇▇▇  39.00\nconcurrent: ▇▇▇▇▇▇▇▇▇▇▇▇▇ 103.00\nwhen:       ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 385.00\n\n==========================================================\nTest: reduce-large x 10000\nNOTE: in node v0.8.14, deferred.reduce causes a\nstack overflow for an array length >= 610\n----------------------------------------------------------\nconcurrent: ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 371.00\nwhen:       ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 502.00\n```\n\nYou can find more performance results [here](https://github.com/pspeter3/promise-perf-tests)\n\nOverview\n--------\n\n### Simple Promise\n\nConcurrent supports the bare bones Promise implementation that supports\n`then(onFulfilled, onRejected)`, `fulfill(value)`, `reject(reason)`.\n\n```js\nvar Promise = require('concurrent').Promise;\n\nvar success = new Promise();\nsuccess.then(function(value) {\n  console.log(value); // 'success'\n});\nsuccess.fulfill('success');\n\nvar failure = new Promise();\nfailure.then(null, function(reason) {\n  console.log(reason); // 'failure'\n});\nfailure.reject('failure');\n```\n\n[Documentation](http://pspeter3.com/concurrent/promise.js.html)\n\n### Futures\n\nConcurrent also provides a Future class which inherits from Promise. It has a\nlot of syntactic sugar on top of the Promises/A+ spec based on the Scala Future\nAPI.\n\n```js\nvar Future = require('concurrent').Future;\n\nvar success = new Future();\nsuccess.onComplete(function(result) {\n  console.log(result; // 'success'\n});\nsuccess.fulfill('success');\n\nvar failure = new Future();\nfailure.onComplete(function(result) {\n  console.log(result); // 'failure'\n});\nfailure.reject('failure');\n```\n\n[Documentation](http://pspeter3.com/concurrent/future.js.html)\n\n### Collections\n\nConcurrent also provides a collections library which gives a lot of the standard\niterators. All the iterators are performed asynchronously and return Futures.\nThe following methods are supported:\n\n- `forEach`\n- `every`\n- `some`\n- `filter`\n- `map`\n- `reverse`\n- `reduce`\n- `reduceRight`\n\n[Documentation](http://pspeter3.com/concurrent/collections.js.html)\n\n### Working with existing callbacks\n\nFutures also have support for working with existing callback style libraries by\nusing the `convert` method which returns a callback handler.\n\n```js\nvar Future = require('concurrent').Future;\nvar request = require('request');\n\nvar google = new Future();\ngoogle.map(function(value) {\n  var body = value[1]; // Request returns a response and a body\n  console.log(body); // HTML for http://www.google.com\n});\nrequest('http://www.google.com', google.convert());\n```\n\n### Working with other Promise implementations\n\nSince concurrent implements the Promises/A+ spec, it should work with other\nlibraries that implement the spec. Also, the Future class internally does not\nexpect any method beyond `then`, `fulfill`, and `reject` so the prototype\nmethods can be merged into other implementations as long as they have those\nthree methods.\n\nBrowsers\n--------\n\nConcurrent can be used in browser environments that support ES5, specifically\n`forEach`, `Array.isArray` and `Object.create`. Look at this [JsFiddle](http://jsfiddle.net/pspeter3/h3MLs/)\nas an example of using the libary in the browser.\n\nCredits\n-------\n\nA lot of people had a hand in inspiring this project and helping getting it done. I'd like to thank:\n\n- [@brikis98](https://github.com/brikis98) for helping me come up with the idea\n- [Promises, understanding by doing](http://modernjavascript.blogspot.com/2013/08/promisesa-understanding-by-doing.html) for the initial promise spec\n- [cujos/when](https://github.com/cujojs/when) for fully featured examples\n- [aheckmann/mpromise](https://github.com/aheckmann/mpromise) for node.js specific implementation\n- [promises-aplus/promises-tests](https://github.com/promises-aplus/promises-tests) for the test suite\n- [Scala Futures](http://www.scala-lang.org/api/current/index.html#scala.concurrent.Future) For API sugar\n\nLicense\n-------\n\nThis is licensed under the MIT license. See the LICENSE file\n",
  "bugs": {
    "url": "https://github.com/pspeter3/concurrent/issues"
  },
  "_id": "concurrent@0.3.2",
  "dist": {
    "shasum": "0eaa0011a15798c56351128f22247f6e2317f50e",
    "tarball": "http://registry.npmjs.org/concurrent/-/concurrent-0.3.2.tgz"
  },
  "_from": "concurrent@*",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "pspeter3",
    "email": "pspeter333@gmail.com"
  },
  "maintainers": [
    {
      "name": "pspeter3",
      "email": "pspeter333@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "0eaa0011a15798c56351128f22247f6e2317f50e",
  "_resolved": "https://registry.npmjs.org/concurrent/-/concurrent-0.3.2.tgz",
  "homepage": "https://github.com/pspeter3/concurrent#readme"
}
